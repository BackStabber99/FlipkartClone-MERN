{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Balwant singh\\\\Desktop\\\\FlipkartClone\\\\projfrontend\\\\components\\\\AppCarousel.js\";\n\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport CarouselItem from \"./CarouselItem\";\n\nvar _Dimensions$get = Dimensions.get('window'),\n    width = _Dimensions$get.width,\n    heigth = _Dimensions$get.heigth;\n\nvar flatList;\n\nfunction infiniteScroll(dataList) {\n  var numberOfData = dataList.length;\n  var scrollValue = 0,\n      scrolled = 0;\n  flag = 0;\n  setInterval(function () {\n    if (scrolled == 0) flag = 0;\n    if (scrolled == numberOfData - 1) flag = 1;\n\n    if (flag === 0 && scrolled < numberOfData - 1) {\n      scrollValue = scrollValue + width;\n      scrolled++;\n    } else {\n      scrollValue = scrollValue - width;\n      scrolled--;\n    }\n\n    this.flatList.scrollToOffset({\n      animated: true,\n      offset: scrollValue\n    });\n  }, 3000);\n}\n\nvar Carousel = function Carousel(_ref) {\n  var data = _ref.data;\n  var scrollX = new Animated.Value(0);\n  var position = Animated.divide(scrollX, width);\n\n  var _useState = useState(data),\n      _useState2 = _slicedToArray(_useState, 2),\n      dataList = _useState2[0],\n      setDataList = _useState2[1];\n\n  useEffect(function () {\n    setDataList(data);\n    infiniteScroll(dataList);\n  });\n\n  if (data && data.length) {\n    return React.createElement(View, {\n      style: styles.body,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }\n    }, React.createElement(FlatList, {\n      data: data,\n      ref: function ref(flatList) {\n        _this.flatList = flatList;\n      },\n      keyExtractor: function keyExtractor(item, index) {\n        return 'key' + index;\n      },\n      horizontal: true,\n      pagingEnabled: true,\n      scrollEnabled: true,\n      snapToAlignment: \"center\",\n      scrollEventThrottle: 16,\n      showsHorizontalScrollIndicator: false,\n      renderItem: function renderItem(_ref2) {\n        var item = _ref2.item;\n        return React.createElement(CarouselItem, {\n          item: item,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 32\n          }\n        });\n      },\n      onScroll: Animated.event([{\n        nativeEvent: {\n          contentOffset: {\n            x: scrollX\n          }\n        }\n      }]),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }\n    }), React.createElement(View, {\n      style: styles.dotView,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }\n    }, data.map(function (_, i) {\n      var opacity = position.interpolate({\n        inputRange: [i - 1, i, i + 1],\n        outputRange: [0.3, 1, 0.3],\n        extrapolate: 'clamp'\n      });\n      return React.createElement(Animated.View, {\n        key: i,\n        style: {\n          opacity: opacity,\n          height: 10,\n          width: 10,\n          backgroundColor: 'orange',\n          margin: 8,\n          borderRadius: 5\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 29\n        }\n      });\n    })));\n  }\n\n  console.log('Please provide Images');\n  return null;\n};\n\nvar styles = StyleSheet.create({\n  body: {\n    marginTop: 10\n  },\n  dotView: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    marginTop: -35\n  }\n});\nexport default Carousel;","map":{"version":3,"sources":["C:/Users/Balwant singh/Desktop/FlipkartClone/projfrontend/components/AppCarousel.js"],"names":["React","useState","useEffect","CarouselItem","Dimensions","get","width","heigth","flatList","infiniteScroll","dataList","numberOfData","length","scrollValue","scrolled","flag","setInterval","scrollToOffset","animated","offset","Carousel","data","scrollX","Animated","Value","position","divide","setDataList","styles","body","item","index","event","nativeEvent","contentOffset","x","dotView","map","_","i","opacity","interpolate","inputRange","outputRange","extrapolate","height","backgroundColor","margin","borderRadius","console","log","StyleSheet","create","marginTop","flexDirection","justifyContent"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n    View,\r\n    Text,\r\n    StyleSheet,\r\n    Dimensions,\r\n    FlatList,\r\n    Animated,\r\n} from 'react-native';\r\nimport CarouselItem from './CarouselItem';\r\n\r\nconst { width, heigth } = Dimensions.get('window');\r\nlet flatList;\r\n\r\nfunction infiniteScroll(dataList) {\r\n    const numberOfData = dataList.length;\r\n    let scrollValue = 0,\r\n        scrolled = 0;\r\n    flag = 0;\r\n\r\n    setInterval(function () {\r\n        if (scrolled == 0) flag = 0;\r\n        if (scrolled == numberOfData - 1) flag = 1;\r\n        if (flag === 0 && scrolled < numberOfData - 1) {\r\n            scrollValue = scrollValue + width;\r\n            scrolled++;\r\n        } else {\r\n            scrollValue = scrollValue - width;\r\n            scrolled--;\r\n        }\r\n\r\n        this.flatList.scrollToOffset({ animated: true, offset: scrollValue });\r\n    }, 3000);\r\n}\r\n\r\nconst Carousel = ({ data }) => {\r\n    const scrollX = new Animated.Value(0);\r\n    let position = Animated.divide(scrollX, width);\r\n    const [dataList, setDataList] = useState(data);\r\n\r\n    useEffect(() => {\r\n        setDataList(data);\r\n        infiniteScroll(dataList);\r\n    });\r\n\r\n    if (data && data.length) {\r\n        return (\r\n            <View style={styles.body}>\r\n                <FlatList\r\n                    data={data}\r\n                    ref={(flatList) => {\r\n                        this.flatList = flatList;\r\n                    }}\r\n                    keyExtractor={(item, index) => 'key' + index}\r\n                    horizontal\r\n                    pagingEnabled\r\n                    scrollEnabled\r\n                    snapToAlignment='center'\r\n                    scrollEventThrottle={16}\r\n                    showsHorizontalScrollIndicator={false}\r\n                    renderItem={({ item }) => {\r\n                        return <CarouselItem item={item} />;\r\n                    }}\r\n                    onScroll={Animated.event([\r\n                        { nativeEvent: { contentOffset: { x: scrollX } } },\r\n                    ])}\r\n                />\r\n\r\n                <View style={styles.dotView}>\r\n                    {data.map((_, i) => {\r\n                        let opacity = position.interpolate({\r\n                            inputRange: [i - 1, i, i + 1],\r\n                            outputRange: [0.3, 1, 0.3],\r\n                            extrapolate: 'clamp',\r\n                        });\r\n                        return (\r\n                            <Animated.View\r\n                                key={i}\r\n                                style={{\r\n                                    opacity,\r\n                                    height: 10,\r\n                                    width: 10,\r\n                                    backgroundColor: 'orange',\r\n                                    margin: 8,\r\n                                    borderRadius: 5,\r\n                                }}\r\n                            />\r\n                        );\r\n                    })}\r\n                </View>\r\n            </View>\r\n        );\r\n    }\r\n\r\n    console.log('Please provide Images');\r\n    return null;\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n    body: {\r\n        marginTop: 10,\r\n    },\r\n\r\n    dotView: {\r\n        flexDirection: 'row',\r\n        justifyContent: 'center',\r\n        marginTop: -35,\r\n    },\r\n});\r\n\r\nexport default Carousel;\r\n"]},"metadata":{},"sourceType":"module"}